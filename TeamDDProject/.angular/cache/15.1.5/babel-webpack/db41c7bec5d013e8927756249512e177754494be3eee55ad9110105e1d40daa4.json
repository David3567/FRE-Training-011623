{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { map } from 'rxjs/operators';\nlet RegisterOneComponent = class RegisterOneComponent {\n  constructor(formBuilder, http) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.registerForm1 = this.formBuilder.group({\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.emailExistsValidator.bind(this)],\n        updateOn: 'blur'\n      }],\n      password: ['', Validators.required]\n    });\n  }\n  get email() {\n    return this.registerForm1.get('email');\n  }\n  get password() {\n    return this.registerForm1.get('password');\n  }\n  onSubmit() {\n    console.log(this.registerForm1.value);\n  }\n  checkEmailExists(email) {\n    return this.http.get(`/auth/check-email?email=${email}`).pipe(map(response => {\n      return response.exists;\n    }));\n  }\n  emailExistsValidator(control) {\n    return this.checkEmailExists(control.value).pipe(map(exists => {\n      return exists ? {\n        emailExists: true\n      } : null;\n    }));\n  }\n};\nRegisterOneComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterOneComponent);\nexport { RegisterOneComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAIEC,UAAU,QACL,gBAAgB;AAGvB,SAASC,GAAG,QAAQ,gBAAgB;AAO7B,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAE/BC,YAAoBC,WAAwB,EAAUC,IAAgB;IAAlD,gBAAW,GAAXD,WAAW;IAAuB,SAAI,GAAJC,IAAI;IACxD,IAAI,CAACC,aAAa,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MAC1CC,KAAK,EAAE,CACL,EAAE,EACF;QACEC,UAAU,EAAE,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACQ,KAAK,CAAC;QACnDG,eAAe,EAAE,CAAC,IAAI,CAACC,oBAAoB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvDC,QAAQ,EAAE;OACX,CACF;MACDC,QAAQ,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACU,QAAQ;KACnC,CAAC;EACJ;EACA,IAAIF,KAAK;IACP,OAAO,IAAI,CAACF,aAAa,CAACU,GAAG,CAAC,OAAO,CAAC;EACxC;EAEA,IAAID,QAAQ;IACV,OAAO,IAAI,CAACT,aAAa,CAACU,GAAG,CAAC,UAAU,CAAC;EAC3C;EAEAC,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,aAAa,CAACc,KAAK,CAAC;EACvC;EAEAC,gBAAgB,CAACb,KAAa;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACW,GAAG,CAAM,2BAA2BR,KAAK,EAAE,CAAC,CAACc,IAAI,CAChErB,GAAG,CAAEsB,QAAQ,IAAI;MACf,OAAOA,QAAQ,CAACC,MAAM;IACxB,CAAC,CAAC,CACH;EACH;EACAZ,oBAAoB,CAClBa,OAAwB;IAExB,OAAO,IAAI,CAACJ,gBAAgB,CAACI,OAAO,CAACL,KAAK,CAAC,CAACE,IAAI,CAC9CrB,GAAG,CAAEuB,MAAM,IAAI;MACb,OAAOA,MAAM,GAAG;QAAEE,WAAW,EAAE;MAAI,CAAE,GAAG,IAAI;IAC9C,CAAC,CAAC,CACH;EACH;CACD;AA3CYxB,oBAAoB,eALhCH,SAAS,CAAC;EACT4B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW3B,oBAAoB,CA2ChC;SA3CYA,oBAAoB","names":["Component","Validators","map","RegisterOneComponent","constructor","formBuilder","http","registerForm1","group","email","validators","required","asyncValidators","emailExistsValidator","bind","updateOn","password","get","onSubmit","console","log","value","checkEmailExists","pipe","response","exists","control","emailExists","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/pages/register/register-one/register-one.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterOneComponent {\n  registerForm1!: FormGroup;\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {\n    this.registerForm1 = this.formBuilder.group({\n      email: [\n        '',\n        {\n          validators: [Validators.required, Validators.email],\n          asyncValidators: [this.emailExistsValidator.bind(this)],\n          updateOn: 'blur',\n        },\n      ],\n      password: ['', Validators.required],\n    });\n  }\n  get email() {\n    return this.registerForm1.get('email');\n  }\n\n  get password() {\n    return this.registerForm1.get('password');\n  }\n\n  onSubmit() {\n    console.log(this.registerForm1.value);\n  }\n\n  checkEmailExists(email: string): Observable<boolean> {\n    return this.http.get<any>(`/auth/check-email?email=${email}`).pipe(\n      map((response) => {\n        return response.exists;\n      })\n    );\n  }\n  emailExistsValidator(\n    control: AbstractControl\n  ): Observable<{ [key: string]: any } | null> {\n    return this.checkEmailExists(control.value).pipe(\n      map((exists) => {\n        return exists ? { emailExists: true } : null;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}