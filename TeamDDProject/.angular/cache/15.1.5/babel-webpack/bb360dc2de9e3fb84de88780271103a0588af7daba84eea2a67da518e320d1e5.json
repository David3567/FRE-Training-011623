{"ast":null,"code":"import { BehaviorSubject, catchError, map, of, tap, throwError } from 'rxjs';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:4231/auth';\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    };\n    this.userSubject$ = new BehaviorSubject({\n      id: '',\n      username: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    });\n  }\n  setNewUser(userSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n  registerUser(userRole) {\n    const url = `${this.apiUrl}/signup`;\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userRole\n    };\n    const {\n      username,\n      password,\n      email,\n      role,\n      tmdb_key\n    } = this.usertoAdd;\n    if (!username || !password || !email || !role || !tmdb_key) return of('Register failed');\n    console.log(this.usertoAdd);\n    return this.http.post(url, this.usertoAdd).pipe(tap(user => {\n      this.handleSuccessfulSignup(user);\n    }), catchError(error => {\n      return throwError('Something went wrong during sign up!', error);\n    }));\n  }\n  handleSuccessfulSignup(user) {\n    const userInfo = jwt_decode(user.accessToken);\n    userInfo.role = user.role;\n    localStorage.setItem('accessToken', user.accessToken);\n    localStorage.setItem('role', user.role);\n    this.userSubject$.next(userInfo);\n    this.router.navigate(['/movies']);\n  }\n  logout() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('role');\n    this.userSubject$.next({\n      id: '',\n      username: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    });\n    this.router.navigate(['/home']);\n  }\n  login(loginInfo) {\n    // console.log(loginInfo)\n    return this.http.post(`${this.apiUrl}/signin`, {\n      email: loginInfo.email,\n      password: loginInfo.password\n    }, {\n      withCredentials: true\n    }).pipe(map(user => {\n      let userInfo = jwt_decode(user.accessToken);\n      userInfo.role = user.role;\n      localStorage.setItem('accessToken', user.accessToken);\n      localStorage.setItem('role', user.role);\n      this.userSubject$.next(userInfo);\n      return user;\n    }), catchError(error => {\n      return throwError('SomeThing Wrong during sign in!', error);\n    }));\n  }\n  refreshToken() {\n    console.log('refreshing token');\n    const user = this.getDecodedUserFromLocalStorage();\n    if (!user) {\n      return throwError('No valid user found in localStorage!');\n    }\n    return this.http.post(`${this.apiUrl}/refresh-token`, user).pipe(tap(user => {\n      this.updateLocalStorageAndUserSubject(user);\n    }), catchError(error => {\n      return throwError('Something went wrong during refresh token!', error);\n    }));\n  }\n  getDecodedUserFromLocalStorage() {\n    const token = localStorage.getItem('accessToken');\n    const role = localStorage.getItem('role');\n    if (!token) {\n      return null;\n    }\n    const user = jwt_decode(token);\n    user.role = role;\n    delete user.exp;\n    delete user.iat;\n    return user;\n  }\n  updateLocalStorageAndUserSubject(user) {\n    const userInfo = jwt_decode(user.accessToken);\n    userInfo.role = user.role;\n    localStorage.setItem('accessToken', user.accessToken);\n    localStorage.setItem('role', user.role);\n    this.userSubject$.next(userInfo);\n  }\n  updateRole(userRole) {\n    if (!userRole) {\n      return of('Register failed');\n    }\n    return this.http.patch(`${this.apiUrl}/userupdate`, userRole).pipe(tap(user => {\n      const userInfo = jwt_decode(user.accessToken);\n      userInfo.role = user.role;\n      localStorage.setItem('accessToken', user.accessToken);\n      localStorage.setItem('role', user.role);\n      this.userSubject$.next(userInfo);\n      this.router.navigate(['/movies']);\n    }), catchError(error => {\n      return throwError('Something went wrong during role update!', error);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","catchError","map","of","tap","throwError","jwt_decode","AuthService","constructor","http","router","username","password","email","role","tmdb_key","userSubject$","id","setNewUser","userSubInfo","console","log","usertoAdd","registerUser","userRole","url","apiUrl","post","pipe","user","handleSuccessfulSignup","error","userInfo","accessToken","localStorage","setItem","next","navigate","logout","removeItem","login","loginInfo","withCredentials","refreshToken","getDecodedUserFromLocalStorage","updateLocalStorageAndUserSubject","token","getItem","exp","iat","updateRole","patch","factory","providedIn"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/services/authService/auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {\n  BehaviorSubject,\n  catchError,\n  map,\n  Observable,\n  of,\n  tap,\n  throwError,\n} from 'rxjs';\n\nimport { Router } from '@angular/router';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n  userToAdd,\n  UserSubInfo,\n  AppUserAuthCookie,\n  UserLoginInfo,\n  AppUserToken,\n} from '../interface/user-interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:4231/auth';\n  public usertoAdd: userToAdd = {\n    username: '',\n    password: '',\n    email: '',\n    role: '',\n    tmdb_key: '',\n  };\n  public userSubject$: BehaviorSubject<AppUserAuthCookie>;\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.userSubject$ = new BehaviorSubject<AppUserAuthCookie>({\n      id: '',\n      username: '',\n      email: '',\n      role: '',\n      tmdb_key: '',\n    });\n  }\n\n  setNewUser(userSubInfo: UserSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo,\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n\n  registerUser(userRole: { role: string }): Observable<any> {\n    const url = `${this.apiUrl}/signup`;\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userRole,\n    };\n    const { username, password, email, role, tmdb_key } = this.usertoAdd;\n    if (!username || !password || !email || !role || !tmdb_key)\n      return of('Register failed');\n\n    console.log(this.usertoAdd);\n\n    return this.http.post<AppUserToken>(url, this.usertoAdd).pipe(\n      tap((user: AppUserToken) => {\n        this.handleSuccessfulSignup(user);\n      }),\n      catchError((error) => {\n        return throwError('Something went wrong during sign up!', error);\n      })\n    );\n  }\n  private handleSuccessfulSignup(user: AppUserToken) {\n    const userInfo: any = jwt_decode(user.accessToken);\n    userInfo.role = user.role;\n    localStorage.setItem('accessToken', user.accessToken);\n    localStorage.setItem('role', user.role);\n    this.userSubject$.next(userInfo);\n    this.router.navigate(['/movies']);\n  }\n\n  logout() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('role');\n    this.userSubject$.next({\n      id: '',\n      username: '',\n      email: '',\n      role: '',\n      tmdb_key: '',\n    });\n    this.router.navigate(['/home']);\n  }\n\n  login(loginInfo: UserLoginInfo) {\n    // console.log(loginInfo)\n    return this.http\n      .post<AppUserToken>(\n        `${this.apiUrl}/signin`,\n        { email: loginInfo.email, password: loginInfo.password },\n        { withCredentials: true }\n      )\n      .pipe(\n        map((user: AppUserToken) => {\n          let userInfo: any = jwt_decode(user.accessToken);\n          userInfo.role = user.role;\n          localStorage.setItem('accessToken', user.accessToken);\n          localStorage.setItem('role', user.role);\n          this.userSubject$.next(userInfo);\n          return user;\n        }),\n        catchError((error) => {\n          return throwError('SomeThing Wrong during sign in!', error);\n        })\n      );\n  }\n\n  refreshToken(): Observable<AppUserToken | string> {\n    console.log('refreshing token');\n    const user = this.getDecodedUserFromLocalStorage();\n\n    if (!user) {\n      return throwError('No valid user found in localStorage!');\n    }\n\n    return this.http\n      .post<AppUserToken>(`${this.apiUrl}/refresh-token`, user)\n      .pipe(\n        tap((user: AppUserToken) => {\n          this.updateLocalStorageAndUserSubject(user);\n        }),\n        catchError((error) => {\n          return throwError(\n            'Something went wrong during refresh token!',\n            error\n          );\n        })\n      );\n  }\n\n  private getDecodedUserFromLocalStorage(): any {\n    const token = localStorage.getItem('accessToken');\n    const role = localStorage.getItem('role');\n\n    if (!token) {\n      return null;\n    }\n\n    const user: any = jwt_decode(token);\n    user.role = role;\n    delete user.exp;\n    delete user.iat;\n\n    return user;\n  }\n\n  private updateLocalStorageAndUserSubject(user: AppUserToken) {\n    const userInfo: any = jwt_decode(user.accessToken);\n    userInfo.role = user.role;\n    localStorage.setItem('accessToken', user.accessToken);\n    localStorage.setItem('role', user.role);\n    this.userSubject$.next(userInfo);\n  }\n\n  updateRole(userRole: { role: string }): Observable<AppUserToken | string> {\n    if (!userRole) {\n      return of('Register failed');\n    }\n\n    return this.http\n      .patch<AppUserToken>(`${this.apiUrl}/userupdate`, userRole)\n      .pipe(\n        tap((user: AppUserToken) => {\n          const userInfo: any = jwt_decode(user.accessToken);\n          userInfo.role = user.role;\n          localStorage.setItem('accessToken', user.accessToken);\n          localStorage.setItem('role', user.role);\n          this.userSubject$.next(userInfo);\n          this.router.navigate(['/movies']);\n        }),\n        catchError((error) => {\n          return throwError('Something went wrong during role update!', error);\n        })\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}