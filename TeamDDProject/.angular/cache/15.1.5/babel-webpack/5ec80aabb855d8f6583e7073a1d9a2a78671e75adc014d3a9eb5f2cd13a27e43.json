{"ast":null,"code":"import { debounceTime, map, switchMap, take, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CustomValidator {\n  constructor(http) {\n    this.http = http;\n  }\n  //An asynchronous call to a server to check if a value exists or not\n  emailExists(obj) {\n    return control => {\n      const email = control.value;\n      return control.valueChanges.pipe(tap(_ => {\n        console.log(email);\n        obj.isLoading = true; //\n      }), debounceTime(200), switchMap(_ => {\n        return this.http.post('http://localhost:4231/auth/check-email', {\n          email\n        });\n      }), map(result => {\n        obj.isLoading = false; //\n        return result ? {\n          emailExists: true\n        } : null;\n      }), take(1));\n    };\n  }\n}\nCustomValidator.ɵfac = function CustomValidator_Factory(t) {\n  return new (t || CustomValidator)(i0.ɵɵinject(i1.HttpClient));\n};\nCustomValidator.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomValidator,\n  factory: CustomValidator.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAOA,SAASA,YAAY,EAAEC,GAAG,EAAcC,SAAS,EAAEC,IAAI,EAAEC,GAAG,QAAQ,MAAM;;;AAK1E,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvC;EACAC,WAAW,CAACC,GAAQ;IAClB,OAAQC,OAAwB,IAAyC;MACvE,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK;MAC3B,OAAOF,OAAO,CAACG,YAAY,CAACC,IAAI,CAC9BV,GAAG,CAAEW,CAAC,IAAI;QACRC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;QAClBF,GAAG,CAACS,SAAS,GAAG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,EACFlB,YAAY,CAAC,GAAG,CAAC,EACjBE,SAAS,CAAEa,CAAC,IAAI;QACd,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CACnB,wCAAwC,EACxC;UAAER;QAAK,CAAE,CACV;MACH,CAAC,CAAC,EACFV,GAAG,CAAEmB,MAAe,IAAI;QACtBX,GAAG,CAACS,SAAS,GAAG,KAAK,CAAC,CAAC;QACvB,OAAOE,MAAM,GAAG;UAAEZ,WAAW,EAAE;QAAI,CAAE,GAAG,IAAI;MAC9C,CAAC,CAAC,EACFL,IAAI,CAAC,CAAC,CAAC,CACR;IACH,CAAC;EACH;;AA1BWE,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;EAAAiB,YAFd;AAAM","names":["debounceTime","map","switchMap","take","tap","CustomValidator","constructor","http","emailExists","obj","control","email","value","valueChanges","pipe","_","console","log","isLoading","post","result","factory","providedIn"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/services/custom.validator.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidatorFn,\n  ValidationErrors,\n} from '@angular/forms';\nimport { debounceTime, map, Observable, switchMap, take, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomValidator {\n  constructor(private http: HttpClient) {}\n\n  //An asynchronous call to a server to check if a value exists or not\n  emailExists(obj: any): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      const email = control.value;\n      return control.valueChanges.pipe(\n        tap((_) => {\n          console.log(email);\n          obj.isLoading = true; //\n        }),\n        debounceTime(200),\n        switchMap((_) => {\n          return this.http.post<boolean>(\n            'http://localhost:4231/auth/check-email',\n            { email }\n          );\n        }),\n        map((result: boolean) => {\n          obj.isLoading = false; //\n          return result ? { emailExists: true } : null;\n        }),\n        take(1)\n      );\n    };\n  }\n\n  // testValidator(obj: any): AsyncValidatorFn {\n  //   return (control: AbstractControl): Observable<ValidationErrors | null> => {\n  //     const email = control.value;\n  //     return control.valueChanges.pipe(\n  //       tap((_) => {\n  //         console.log(email + 'validator works');\n  //       })\n  //     );\n  //   };\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}