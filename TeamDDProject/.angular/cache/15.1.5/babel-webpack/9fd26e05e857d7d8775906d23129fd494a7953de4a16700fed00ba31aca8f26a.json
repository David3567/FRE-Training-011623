{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../shared/nav-bar/nav-bar.component\";\nimport * as i5 from \"../components/footer/footer.component\";\nfunction RegisterOneComponent_div_16_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email already exists!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterOneComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 8);\n    i0.ɵɵtext(2, \" Email is required \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" \\u00A0 \");\n    i0.ɵɵelementStart(4, \"div\", 8);\n    i0.ɵɵtext(5, \" Invalid email format \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, RegisterOneComponent_div_16_div_6_Template, 2, 0, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !((tmp_0_0 = ctx_r0.registerForm1.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"hidden\", !((tmp_1_0 = ctx_r0.registerForm1.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"email\"]));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.email == null ? null : ctx_r0.email.errors == null ? null : ctx_r0.email.errors[\"emailExists\"]);\n  }\n}\nfunction RegisterOneComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 8);\n    i0.ɵɵtext(2, \" password is required \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !((tmp_0_0 = ctx_r1.registerForm1.get(\"password\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]));\n  }\n}\nexport class RegisterOneComponent {\n  constructor(formBuilder, http) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.registerForm1 = this.formBuilder.group({\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.emailExistsValidator.bind(this)],\n        updateOn: 'blur'\n      }],\n      password: ['', Validators.required]\n    });\n  }\n  get email() {\n    return this.registerForm1.get('email');\n  }\n  get password() {\n    return this.registerForm1.get('password');\n  }\n  onSubmit() {\n    console.log(this.registerForm1.value);\n  }\n  checkEmailExists(email) {\n    return this.http.get(`/auth/check-email?email=${email}`).pipe(map(response => {\n      return response.exists;\n    }));\n  }\n  emailExistsValidator(control) {\n    return this.checkEmailExists(control.value).pipe(map(exists => {\n      return exists ? {\n        emailExists: true\n      } : null;\n    }));\n  }\n}\nRegisterOneComponent.ɵfac = function RegisterOneComponent_Factory(t) {\n  return new (t || RegisterOneComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\nRegisterOneComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterOneComponent,\n  selectors: [[\"app-register\"]],\n  decls: 24,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"form\"], [1, \"userInputContainer\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"id\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email or phone number *\"], [4, \"ngIf\"], [\"type\", \"text\", \"id\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"password or phone number *\"], [\"type\", \"submit\", 1, \"nextButton\", 3, \"disabled\"], [3, \"hidden\"]],\n  template: function RegisterOneComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-nav-bar\");\n      i0.ɵɵelementStart(2, \"form\", 1)(3, \"p\");\n      i0.ɵɵtext(4, \"Step 1 of 3\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"h1\");\n      i0.ɵɵtext(6, \"Create a password to start your membership\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"p\");\n      i0.ɵɵtext(8, \"Just a few more steps and you're done!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"p\");\n      i0.ɵɵtext(10, \"We hate paperwork, too.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"div\", 2)(13, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterOneComponent_Template_form_ngSubmit_13_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(14, \"p\");\n      i0.ɵɵelement(15, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(16, RegisterOneComponent_div_16_Template, 7, 3, \"div\", 5);\n      i0.ɵɵelementStart(17, \"p\");\n      i0.ɵɵelement(18, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, RegisterOneComponent_div_19_Template, 3, 1, \"div\", 5);\n      i0.ɵɵelementStart(20, \"p\")(21, \"button\", 7);\n      i0.ɵɵtext(22, \"Next\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelement(23, \"app-footer\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm1.get(\"email\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.registerForm1.get(\"email\")) == null ? null : tmp_1_0.dirty) || ((tmp_1_0 = ctx.registerForm1.get(\"email\")) == null ? null : tmp_1_0.touched)));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm1.get(\"password\")) == null ? null : tmp_2_0.invalid) && (((tmp_2_0 = ctx.registerForm1.get(\"password\")) == null ? null : tmp_2_0.dirty) || ((tmp_2_0 = ctx.registerForm1.get(\"password\")) == null ? null : tmp_2_0.touched)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm1.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i4.NavBarComponent, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.FooterComponent],\n  styles: [\"html[_ngcontent-%COMP%], body[_ngcontent-%COMP%] {\\n  height: 100%\\n}\\n\\nform[_ngcontent-%COMP%] {\\n  display: table;\\n  margin: 0 auto;\\n  width: 400px;\\n  margin-top: 50px;\\n}\\n\\nform[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  display: flex;\\n  font-size: medium;\\n}\\n\\nform[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\\n  display: flex;\\n  font-size: 2rem;\\n}\\n\\nform[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  display: table-cell;\\n  margin-bottom: 10px;\\n}\\n\\nform[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  width: 200px;\\n  padding-right: 5%;\\n  text-align: left;\\n  font-size: small;\\n  font-weight: 500;\\n}\\n\\nform[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  width: 400px;\\n  height: 6vh;\\n  border-radius: 0.3vmin;\\n  border-width: 0.1ch;\\n}\\n\\n.input[_ngcontent-%COMP%]::-webkit-input-placeholder {\\n  position: relative;\\n  left: 0.5re, ;\\n}\\n\\n.nextButton[_ngcontent-%COMP%] {\\n  height: 6vh;\\n  width: 100%;\\n  color: aliceblue;\\n  font-size: 1.5rem;\\n  border-radius: 4px;\\n  border: 0px;\\n  background-color: rgb(178, 0, 0);\\n}\\n\\n.userInputContainer[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcmVnaXN0ZXItb25lL3JlZ2lzdGVyLW9uZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFO0FBQ0Y7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsY0FBYztFQUNkLFlBQVk7RUFDWixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLGVBQWU7QUFDakI7O0FBRUE7O0VBRUUsbUJBQW1CO0VBQ25CLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osV0FBVztFQUNYLHNCQUFzQjtFQUN0QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsV0FBVztFQUNYLFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJodG1sLFxuYm9keSB7XG4gIGhlaWdodDogMTAwJVxufVxuXG5mb3JtIHtcbiAgZGlzcGxheTogdGFibGU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICB3aWR0aDogNDAwcHg7XG4gIG1hcmdpbi10b3A6IDUwcHg7XG59XG5cbmZvcm0gcCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogbWVkaXVtO1xufVxuXG5mb3JtIGgxIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAycmVtO1xufVxuXG5mb3JtIGxhYmVsLFxuZm9ybSBpbnB1dCB7XG4gIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG59XG5cbmZvcm0gbGFiZWwge1xuICB3aWR0aDogMjAwcHg7XG4gIHBhZGRpbmctcmlnaHQ6IDUlO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBmb250LXNpemU6IHNtYWxsO1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG5mb3JtIGlucHV0IHtcbiAgd2lkdGg6IDQwMHB4O1xuICBoZWlnaHQ6IDZ2aDtcbiAgYm9yZGVyLXJhZGl1czogMC4zdm1pbjtcbiAgYm9yZGVyLXdpZHRoOiAwLjFjaDtcbn1cblxuLmlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwLjVyZSwgO1xufVxuXG4ubmV4dEJ1dHRvbiB7XG4gIGhlaWdodDogNnZoO1xuICB3aWR0aDogMTAwJTtcbiAgY29sb3I6IGFsaWNlYmx1ZTtcbiAgZm9udC1zaXplOiAxLjVyZW07XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYm9yZGVyOiAwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzgsIDAsIDApO1xufVxuXG4udXNlcklucHV0Q29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","map","i0","RegisterOneComponent","constructor","formBuilder","http","registerForm1","group","email","validators","required","asyncValidators","emailExistsValidator","bind","updateOn","password","get","onSubmit","console","log","value","checkEmailExists","pipe","response","exists","control","emailExists","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/pages/register/register-one/register-one.component.ts","/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/pages/register/register-one/register-one.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register-one.component.html',\n  styleUrls: ['./register-one.component.css'],\n})\nexport class RegisterOneComponent {\n  registerForm1!: FormGroup;\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {\n    this.registerForm1 = this.formBuilder.group({\n      email: [\n        '',\n        {\n          validators: [Validators.required, Validators.email],\n          asyncValidators: [this.emailExistsValidator.bind(this)],\n          updateOn: 'blur',\n        },\n      ],\n      password: ['', Validators.required],\n    });\n  }\n  get email() {\n    return this.registerForm1.get('email');\n  }\n\n  get password() {\n    return this.registerForm1.get('password');\n  }\n\n  onSubmit() {\n    console.log(this.registerForm1.value);\n  }\n\n  checkEmailExists(email: string): Observable<boolean> {\n    return this.http.get<any>(`/auth/check-email?email=${email}`).pipe(\n      map((response) => {\n        return response.exists;\n      })\n    );\n  }\n  emailExistsValidator(\n    control: AbstractControl\n  ): Observable<{ [key: string]: any } | null> {\n    return this.checkEmailExists(control.value).pipe(\n      map((exists) => {\n        return exists ? { emailExists: true } : null;\n      })\n    );\n  }\n}\n","<div class=\"container\">\n  <app-nav-bar></app-nav-bar>\n  <form class=\"form\">\n    <p>Step 1 of 3</p>\n    <h1>Create a password to start your membership</h1>\n    <p>Just a few more steps and you're done!</p>\n    <p>We hate paperwork, too.</p>\n    <br>\n    <div class=\"userInputContainer\">\n      <form [formGroup]=\"registerForm1\" (ngSubmit)=\"onSubmit()\" novalidate>\n        <p>\n          <!-- <label for=\"email\">Email </label> -->\n          <input type=\"text\" id=\"email\" name=\"email\" formControlName=\"email\" placeholder=\"Email or phone number *\">\n        </p>\n        <div\n          *ngIf=\"registerForm1.get('email')?.invalid && (registerForm1.get('email')?.dirty || registerForm1.get('email')?.touched)\">\n          <div [hidden]=\"!registerForm1.get('email')?.errors?.['required']\">\n            Email is required\n          </div>\n          &nbsp;\n          <div [hidden]=\"!registerForm1.get('email')?.errors?.['email']\">\n            Invalid email format\n          </div>\n          <div *ngIf=\"email?.errors?.['emailExists']\">Email already exists!</div>\n        </div>\n\n        <p>\n          <!-- <label for=\"password\">Password </label> -->\n          <input type=\"text\" id=\"password\" name=\"password\" formControlName=\"password\"\n            placeholder=\"password or phone number *\">\n        </p>\n        <div\n          *ngIf=\"registerForm1.get('password')?.invalid && (registerForm1.get('password')?.dirty || registerForm1.get('password')?.touched)\">\n          <div [hidden]=\"!registerForm1.get('password')?.errors?.['required']\">\n            password is required\n          </div>\n        </div>\n        <p>\n          <button class=\"nextButton\" type=\"submit\" [disabled]=\"!registerForm1.valid\">Next</button>\n        </p>\n      </form>\n    </div>\n\n  </form>\n  <app-footer></app-footer>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}