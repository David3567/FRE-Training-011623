{"ast":null,"code":"import { catchError, Subject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// example \"https://api.themoviedb.org/3/movie/upcoming?api_key=b58da010083caad9ac63eee587b4999a&language=en-US&page=1\"\nexport class MovieServiceService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.themoviedb.org/3/movie/';\n    this.miffyApiKey = 'b58da010083caad9ac63eee587b4999a';\n    // private queenieApiKey = '024af1dd67c6b784093e06ce104dd99e';\n    this.imgBaseUrl = 'https://image.tmdb.org/t/p/w500';\n    this.idBaseUrl = \"https://api.themoviedb.org/3/movie/\";\n    this.MovieList = [];\n    this.MovieList$ = new Subject();\n    this.VideoList = [];\n    this.VideoList$ = new Subject();\n  }\n  getMovies(page = 1, language = 'en-US') {\n    const url = `${this.apiUrl}upcoming?api_key=${this.miffyApiKey}&language=${language}&page=${page}`;\n    // const url = `${this.apiUrl}${this.queenieApiKey}&language=${language}&page=${page}`;\n    return this.http.get(url).pipe(tap(data => {\n      const movies = data.results.map(each => ({\n        id: each.id,\n        img: each.poster_path,\n        title: each.title,\n        rate: each.vote_average,\n        date: each.release_date,\n        description: each.overview,\n        language: each.original_language,\n        popularity: each.popularity,\n        video: each.video,\n        adult: each.adult\n      }));\n      this.MovieList = movies;\n      this.MovieList$.next(movies);\n      // console.log(movies);\n    }), catchError(err => {\n      console.log(err);\n      return err;\n    }));\n  }\n  // https://api.themoviedb.org/3/movie/315162/videos?api_key=b58da010083caad9ac63eee587b4999a&language=en-US\n  getVideosById(id) {\n    const getVideoUrl = `${this.idBaseUrl}${id}/videos?api_key=${this.miffyApiKey}&language=en-US`;\n    return this.http.get(getVideoUrl).pipe(tap(data => {\n      const videos = data.results.map(each => ({\n        iso_639_1: each.iso_639_1,\n        iso_3166_1: each.iso_3166_1,\n        name: each.name,\n        key: each.key,\n        site: each.site,\n        size: each.size,\n        type: each.type,\n        official: each.official,\n        published_at: each.published_at,\n        id: each.id\n      }));\n      this.VideoList = videos;\n      this.VideoList$.next(videos);\n      console.log(videos);\n      console.log('here');\n    }), catchError(err => {\n      console.log(err);\n      return err;\n    }));\n  }\n  getMovieDetails(movieId) {\n    const url = `${this.apiUrl}${movieId}?api_key=${this.miffyApiKey}&language=en-US`;\n    return this.http.get(url);\n  }\n}\nMovieServiceService.ɵfac = function MovieServiceService_Factory(t) {\n  return new (t || MovieServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieServiceService,\n  factory: MovieServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","Subject","tap","MovieServiceService","constructor","http","getMovies","page","language","url","apiUrl","miffyApiKey","get","pipe","data","movies","results","map","each","id","img","poster_path","title","rate","vote_average","date","release_date","description","overview","original_language","popularity","video","adult","MovieList","MovieList$","next","err","console","log","getVideosById","getVideoUrl","idBaseUrl","videos","iso_639_1","iso_3166_1","name","key","site","size","type","official","published_at","VideoList","VideoList$","getMovieDetails","movieId","factory","providedIn"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/movie-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, of, Subject, tap } from 'rxjs';\nimport { Movie, ApiData, Video } from './interface/movie-interface';\nimport { MovieDetails } from './interface/movie-details-interface';\n\n// example \"https://api.themoviedb.org/3/movie/upcoming?api_key=b58da010083caad9ac63eee587b4999a&language=en-US&page=1\"\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MovieServiceService {\n  private apiUrl = 'https://api.themoviedb.org/3/movie/';\n  private miffyApiKey = 'b58da010083caad9ac63eee587b4999a';\n  // private queenieApiKey = '024af1dd67c6b784093e06ce104dd99e';\n  private imgBaseUrl: string = 'https://image.tmdb.org/t/p/w500';\n  private idBaseUrl : string = \"https://api.themoviedb.org/3/movie/\"\n\n  MovieList: Movie[] = [];\n  MovieList$ = new Subject<Movie[]>();\n  movieDetails!: MovieDetails;\n\n  VideoList: Video[] = [];\n  VideoList$ = new Subject<Video[]>();\n\n  constructor(private http: HttpClient) {}\n\n  getMovies(page = 1, language = 'en-US') {\n    const url = `${this.apiUrl}upcoming?api_key=${this.miffyApiKey}&language=${language}&page=${page}`;\n    // const url = `${this.apiUrl}${this.queenieApiKey}&language=${language}&page=${page}`;\n    \n    return this.http.get<ApiData>(url).pipe(\n      tap((data) => {\n        const movies = data.results.map((each: any) => ({\n          id: each.id,\n          img: each.poster_path,\n          title: each.title,\n          rate: each.vote_average,\n          date: each.release_date,\n          description: each.overview,\n          language: each.original_language,\n          popularity: each.popularity,\n          video: each.video,\n          adult: each.adult,\n        }));\n        this.MovieList = movies;\n        this.MovieList$.next(movies);\n        // console.log(movies);\n      }),\n      catchError((err: any) => {\n        console.log(err);\n        return err;\n      })\n    );\n  };\n\n  // https://api.themoviedb.org/3/movie/315162/videos?api_key=b58da010083caad9ac63eee587b4999a&language=en-US\n  getVideosById(id: number) {\n    const getVideoUrl = `${this.idBaseUrl}${id}/videos?api_key=${this.miffyApiKey}&language=en-US`;\n    return this.http.get<ApiData>(getVideoUrl).pipe(\n      tap((data) => {\n        const videos = data.results.map((each: any) => ({\n          iso_639_1: each.iso_639_1,\n          iso_3166_1: each.iso_3166_1,\n          name: each.name,\n          key: each.key,\n          site: each.site,\n          size: each.size,\n          type: each.type,\n          official: each.official,\n          published_at: each.published_at,\n          id: each.id,\n        }));\n        this.VideoList = videos;\n        this.VideoList$.next(videos);\n        console.log(videos);\n        console.log('here')\n      }),\n      catchError((err: any) => {\n        console.log(err);\n        return err;\n      })\n    );\n  }\n\n  getMovieDetails(movieId: number): Observable<MovieDetails>{\n    const url = `${this.apiUrl}${movieId}?api_key=${this.miffyApiKey}&language=en-US`;\n    return this.http.get<MovieDetails>(url);\n  }\n}\n\n// `https://api.themoviedb.org/3/movie/${Movie.id}$/videos`"]},"metadata":{},"sourceType":"module","externalDependencies":[]}