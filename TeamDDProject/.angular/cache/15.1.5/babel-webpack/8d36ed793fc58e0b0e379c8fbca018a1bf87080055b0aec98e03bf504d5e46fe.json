{"ast":null,"code":"import { BehaviorSubject, catchError, map, of, throwError } from 'rxjs';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:4231/auth';\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    };\n    this.userSubject$ = new BehaviorSubject({\n      id: '',\n      username: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    });\n  }\n  setNewUser(userSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n  registerUser() {\n    const url = `${this.apiUrl}/signup`;\n    const {\n      username,\n      password,\n      email,\n      role,\n      tmdb_key\n    } = this.usertoAdd;\n    if (!username || !password || !email || !role || !tmdb_key) return of('Register failed');\n    console.log(this.usertoAdd);\n    return this.http.post(url, this.usertoAdd);\n  }\n  clearNewUser() {\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    };\n  }\n  login(loginInfo) {\n    // console.log(loginInfo)\n    return this.http.post(`${this.apiUrl}/signin`, {\n      email: loginInfo.email,\n      password: loginInfo.password\n    }, {\n      withCredentials: true\n    }).pipe(map(user => {\n      let userInfo = jwt_decode(user.accessToken);\n      userInfo.role = user.role;\n      localStorage.setItem('accessToken', user.accessToken);\n      localStorage.setItem('role', user.role);\n      this.userSubject$.next(userInfo);\n      return user;\n    }), catchError(error => {\n      return throwError('SomeThing Wrong during sign in!', error);\n    }));\n  }\n  logout() {\n    // Remove user from local storage\n    localStorage.removeItem('currentUser');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","catchError","map","of","throwError","jwt_decode","AuthService","constructor","http","router","username","password","email","role","tmdb_key","userSubject$","id","setNewUser","userSubInfo","console","log","usertoAdd","registerUser","url","apiUrl","post","clearNewUser","login","loginInfo","withCredentials","pipe","user","userInfo","accessToken","localStorage","setItem","next","error","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/services/authService/auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {\n  BehaviorSubject,\n  catchError,\n  map,\n  Observable,\n  of,\n  throwError,\n} from 'rxjs';\n\nimport { Router } from '@angular/router';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n  userToAdd,\n  UserSubInfo,\n  AppUserAuthCookie,\n  UserLoginInfo,\n  AppUserToken,\n} from '../interface/user-interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:4231/auth';\n  public usertoAdd: userToAdd = {\n    username: '',\n    password: '',\n    email: '',\n    role: '',\n    tmdb_key: '',\n  };\n  private userSubject$: BehaviorSubject<AppUserAuthCookie>;\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.userSubject$ = new BehaviorSubject<AppUserAuthCookie>({\n      id: '',\n      username: '',\n      email: '',\n      role: '',\n      tmdb_key: '',\n    });\n  }\n\n  setNewUser(userSubInfo: UserSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo,\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n\n  registerUser(): Observable<any> {\n    const url = `${this.apiUrl}/signup`;\n    const { username, password, email, role, tmdb_key } = this.usertoAdd;\n    if (!username || !password || !email || !role || !tmdb_key)\n      return of('Register failed');\n    console.log(this.usertoAdd);\n    return this.http.post<any>(url, this.usertoAdd);\n  }\n\n  clearNewUser() {\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: '',\n    };\n  }\n\n  login(loginInfo: UserLoginInfo) {\n    // console.log(loginInfo)\n    return this.http\n      .post<AppUserToken>(\n        `${this.apiUrl}/signin`,\n        { email: loginInfo.email, password: loginInfo.password },\n        { withCredentials: true }\n      )\n      .pipe(\n        map((user: AppUserToken) => {\n          let userInfo: any = jwt_decode(user.accessToken);\n          userInfo.role = user.role;\n          localStorage.setItem('accessToken', user.accessToken);\n          localStorage.setItem('role', user.role);\n          this.userSubject$.next(userInfo);\n          return user;\n        }),\n        catchError((error) => {\n          return throwError('SomeThing Wrong during sign in!', error);\n        })\n      );\n  }\n  logout() {\n    // Remove user from local storage\n    localStorage.removeItem('currentUser');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}