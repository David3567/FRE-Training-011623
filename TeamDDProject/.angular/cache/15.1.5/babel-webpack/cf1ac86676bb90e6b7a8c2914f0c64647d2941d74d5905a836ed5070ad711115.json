{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:4231/auth';\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    };\n  }\n  //   checkEmail(email: any): Observable<boolean> {\n  //     const url = `${this.apiUrl}/check-email`;\n  //     return this.http.post<boolean>(url, { email });\n  //   }\n  setNewUser(userSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n  registerUser() {\n    const url = `${this.apiUrl}/signup`;\n    const {\n      username,\n      password,\n      email,\n      role,\n      tmdb_key\n    } = this.usertoAdd;\n    if (!username || !password || !email || !role || !tmdb_key) return of('Register failed');\n    console.log(this.usertoAdd);\n    return this.http.post(url, this.usertoAdd).pipe(tap(user => {\n      console.log('hhh');\n    }), catchError(error => {\n      return throwError('SomeThing Wrong during sign up!', error);\n    }));\n  }\n  clearNewUser() {\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAsCA,EAAE,EAAEC,UAAU,QAAQ,MAAM;AAClE,SAASC,UAAU,EAAOC,GAAG,QAAmB,gBAAgB;;;AAUhE,OAAM,MAAOC,WAAW;EAUtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAThB,WAAM,GAAG,4BAA4B;IACtC,cAAS,GAAc;MAC5BC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;KACX;EAEsC;EAEvC;EACA;EACA;EACA;EAEAC,UAAU,CAACC,WAAwB;IACjCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,WAAW,CAAC;IACpD;IACA,IAAI,CAACG,SAAS,GAAG;MACf,GAAG,IAAI,CAACA,SAAS;MACjB,GAAGH;KACJ;IACDC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC;EACtC;EAEAC,YAAY;IACV,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,SAAS;IACnC,MAAM;MAAEZ,QAAQ;MAAEC,QAAQ;MAAEC,KAAK;MAAEC,IAAI;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACK,SAAS;IACpE,IAAI,CAACT,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,KAAK,IAAI,CAACC,IAAI,IAAI,CAACC,QAAQ,EACxD,OAAOX,EAAE,CAAC,iBAAiB,CAAC;IAC9Bc,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,SAAS,CAAC;IAC3B,OAAO,IAAI,CAACV,IAAI,CAACc,IAAI,CAAoBF,GAAG,EAAE,IAAI,CAACF,SAAS,CAAC,CAACK,IAAI,CAChElB,GAAG,CAAEmB,IAAuB,IAAI;MAC9BR,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC,EACFb,UAAU,CAAEqB,KAAK,IAAI;MACnB,OAAOtB,UAAU,CAAC,iCAAiC,EAAEsB,KAAK,CAAC;IAC7D,CAAC,CAAC,CACH;EACH;EAEAC,YAAY;IACV,IAAI,CAACR,SAAS,GAAG;MACfT,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;KACX;EACH;;AAnDWP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["of","throwError","catchError","tap","AuthService","constructor","http","username","password","email","role","tmdb_key","setNewUser","userSubInfo","console","log","usertoAdd","registerUser","url","apiUrl","post","pipe","user","error","clearNewUser","factory","providedIn"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/services/authService/auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, tap, timestamp } from 'rxjs/operators';\nimport {\n  userToAdd,\n  UserSubInfo,\n  AppUserAuthCookie,\n} from '../interface/user-interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:4231/auth';\n  public usertoAdd: userToAdd = {\n    username: '',\n    password: '',\n    email: '',\n    role: '',\n    tmdb_key: '',\n  };\n\n  constructor(private http: HttpClient) {}\n\n  //   checkEmail(email: any): Observable<boolean> {\n  //     const url = `${this.apiUrl}/check-email`;\n  //     return this.http.post<boolean>(url, { email });\n  //   }\n\n  setNewUser(userSubInfo: UserSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo,\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n\n  registerUser(): Observable<AppUserAuthCookie | string> {\n    const url = `${this.apiUrl}/signup`;\n    const { username, password, email, role, tmdb_key } = this.usertoAdd;\n    if (!username || !password || !email || !role || !tmdb_key)\n      return of('Register failed');\n    console.log(this.usertoAdd);\n    return this.http.post<AppUserAuthCookie>(url, this.usertoAdd).pipe(\n      tap((user: AppUserAuthCookie) => {\n        console.log('hhh');\n      }),\n      catchError((error) => {\n        return throwError('SomeThing Wrong during sign up!', error);\n      })\n    );\n  }\n\n  clearNewUser() {\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: '',\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}