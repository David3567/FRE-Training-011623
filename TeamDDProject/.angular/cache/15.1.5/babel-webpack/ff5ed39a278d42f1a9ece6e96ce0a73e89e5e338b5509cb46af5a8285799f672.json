{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:4231/auth';\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    };\n  }\n  //   checkEmail(email: any): Observable<boolean> {\n  //     const url = `${this.apiUrl}/check-email`;\n  //     return this.http.post<boolean>(url, { email });\n  //   }\n  setNewUser(userSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n  registerUser() {\n    const url = `${this.apiUrl}/signup`;\n    const user = JSON.stringify(this.usertoAdd);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    console.log('registering', url, user);\n    return this.http.post(url, user, {\n      headers: headers\n    }).pipe(catchError(err => {\n      console.error(err);\n      throw err;\n    }));\n  }\n  clearNewUser() {\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: ''\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,QAAwB,gBAAgB;;;AAM3D,OAAM,MAAOC,WAAW;EAUtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAThB,WAAM,GAAG,4BAA4B;IACtC,cAAS,GAAc;MAC5BC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;KACX;EAEsC;EAEvC;EACA;EACA;EACA;EAEAC,UAAU,CAACC,WAAwB;IACjCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,WAAW,CAAC;IACpD;IACA,IAAI,CAACG,SAAS,GAAG;MACf,GAAG,IAAI,CAACA,SAAS;MACjB,GAAGH;KACJ;IACDC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC;EACtC;EAEAC,YAAY;IACV,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,SAAS;IACnC,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACN,SAAS,CAAC;IAC3C,MAAMO,OAAO,GAAG,IAAIrB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvEY,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEG,GAAG,EAAEE,IAAI,CAAC;IACrC,OAAO,IAAI,CAACd,IAAI,CAACkB,IAAI,CAAMN,GAAG,EAAEE,IAAI,EAAE;MAAEG,OAAO,EAAEA;IAAO,CAAE,CAAC,CAACE,IAAI,CAC9DtB,UAAU,CAAEuB,GAAG,IAAI;MACjBZ,OAAO,CAACa,KAAK,CAACD,GAAG,CAAC;MAClB,MAAMA,GAAG;IACX,CAAC,CAAC,CACH;EACH;EAEAE,YAAY;IACV,IAAI,CAACZ,SAAS,GAAG;MACfT,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;KACX;EACH;;AAhDWP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["HttpHeaders","catchError","AuthService","constructor","http","username","password","email","role","tmdb_key","setNewUser","userSubInfo","console","log","usertoAdd","registerUser","url","apiUrl","user","JSON","stringify","headers","post","pipe","err","error","clearNewUser","factory","providedIn"],"sourceRoot":"","sources":["/Users/xinyiwu/Workplace/beifen/FRE-Training-011623/TeamDDProject/src/app/services/authService/auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map, timestamp } from 'rxjs/operators';\nimport { userToAdd, UserSubInfo } from '../interface/user-interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:4231/auth';\n  public usertoAdd: usertoAdd = {\n    username: '',\n    password: '',\n    email: '',\n    role: '',\n    tmdb_key: '',\n  };\n\n  constructor(private http: HttpClient) {}\n\n  //   checkEmail(email: any): Observable<boolean> {\n  //     const url = `${this.apiUrl}/check-email`;\n  //     return this.http.post<boolean>(url, { email });\n  //   }\n\n  setNewUser(userSubInfo: UserSubInfo) {\n    console.log('current user information', userSubInfo);\n    // console.log('Setting new user');\n    this.usertoAdd = {\n      ...this.usertoAdd,\n      ...userSubInfo,\n    };\n    console.log('iiiii', this.usertoAdd);\n  }\n\n  registerUser(): Observable<any> {\n    const url = `${this.apiUrl}/signup`;\n    const user = JSON.stringify(this.usertoAdd);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    console.log('registering', url, user);\n    return this.http.post<any>(url, user, { headers: headers }).pipe(\n      catchError((err) => {\n        console.error(err);\n        throw err;\n      })\n    );\n  }\n\n  clearNewUser() {\n    this.usertoAdd = {\n      username: '',\n      password: '',\n      email: '',\n      role: '',\n      tmdb_key: '',\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}